@startuml
'https://plantuml.com/sequence-diagram

autonumber

init.rc -> init.zygote64_32.rc: import
activate init.zygote64_32.rc
note right:adb shell getprop ro.zygote
init.zygote64_32.rc -> app_main.cpp: main()
activate app_main.cpp
app_main.cpp -> AndroidRuntime.cpp: start()
activate AndroidRuntime.cpp
AndroidRuntime.cpp -> AndroidRuntime.cpp: startVm()
activate AndroidRuntime.cpp
deactivate AndroidRuntime.cpp
note right:fork zygote进程
AndroidRuntime.cpp -> AndroidRuntime.cpp: CallStaticVoidMethod()
activate AndroidRuntime.cpp
AndroidRuntime.cpp -> ZygoteInit: main()
activate ZygoteInit
ZygoteInit --> ZygoteInit: preload()
activate ZygoteInit
ZygoteInit --> ZygoteInit: preloadClasses()
activate ZygoteInit
deactivate ZygoteInit
ZygoteInit --> ZygoteInit: preloadResources()
activate ZygoteInit
deactivate ZygoteInit
ZygoteInit --> ZygoteInit: preloadOpenGL()
activate ZygoteInit
deactivate ZygoteInit
ZygoteInit --> ZygoteInit: preloadSharedLibraries()
activate ZygoteInit
deactivate ZygoteInit
ZygoteInit --> ZygoteInit: preloadTextResources()
activate ZygoteInit
deactivate ZygoteInit
ZygoteInit --> ZygoteInit: forkSystemServer()
activate ZygoteInit
ZygoteInit --> Zygote: forkSystemServer()
activate Zygote
Zygote --> Zygote: nativeForkSystemServer()
note right: fork systemServer进程
activate Zygote
deactivate Zygote
deactivate Zygote
ZygoteInit --> ZygoteInit: handleSystemServerProcess()
activate ZygoteInit
ZygoteInit --> ZygoteInit: zygoteInit()
activate ZygoteInit
ZygoteInit --> ZygoteInit: commonInit()
activate ZygoteInit
deactivate ZygoteInit
ZygoteInit --> ZygoteInit: nativeZygoteInit()
activate ZygoteInit
ZygoteInit --> app_main.cpp: onZygoteInit()
activate app_main.cpp
app_main.cpp --> ProcessState.cpp: self()
note right: init binder pool, binder线程池上限：DEFAULT_MAX_BINDER_THREADS=15
activate ProcessState.cpp
deactivate ProcessState.cpp
app_main.cpp --> ProcessState.cpp: startThreadPool()
activate ProcessState.cpp
deactivate ProcessState.cpp
deactivate app_main.cpp
deactivate ZygoteInit
ZygoteInit --> RuntimeInit: applicationInit()
activate RuntimeInit
RuntimeInit --> RuntimeInit: findStaticMain()
activate RuntimeInit
RuntimeInit --> MethodAndArgsCaller: new()
activate MethodAndArgsCaller
deactivate MethodAndArgsCaller
deactivate RuntimeInit
deactivate RuntimeInit
deactivate ZygoteInit
deactivate ZygoteInit
deactivate ZygoteInit
deactivate ZygoteInit
ZygoteInit --> MethodAndArgsCaller: run()
activate MethodAndArgsCaller
MethodAndArgsCaller --> SystemServer: main()
activate SystemServer
SystemServer --> SystemServer: run()
activate SystemServer
SystemServer --> BinderInternal: setMaxThreads()
activate BinderInternal
deactivate BinderInternal
note right:systemServer binder线程池上限：sMaxBinderThreads=31
SystemServer --> SystemServer: startBootstrapServices()
activate SystemServer
SystemServer --> ActivityManagerService: new()
activate ActivityManagerService
deactivate ActivityManagerService
SystemServer --> ActivityManagerService: start()
activate ActivityManagerService
deactivate ActivityManagerService
SystemServer --> DisplayManagerService: new()
activate DisplayManagerService
deactivate DisplayManagerService
SystemServer --> DisplayManagerService: onStart()
activate DisplayManagerService
deactivate DisplayManagerService
SystemServer --> PackageManagerService: main()
activate PackageManagerService
deactivate PackageManagerService
deactivate SystemServer
SystemServer --> SystemServer: startCoreServices()
activate SystemServer
deactivate SystemServer
SystemServer --> SystemServer: startOtherServices()
activate SystemServer
SystemServer --> InputManagerService: new()
activate InputManagerService
deactivate InputManagerService
SystemServer --> InputManagerService: start()
activate InputManagerService
deactivate InputManagerService
SystemServer --> WindowManagerService: main()
activate WindowManagerService
deactivate WindowManagerService
SystemServer --> Runnable: new()
activate Runnable
deactivate Runnable
SystemServer --> ActivityManagerService: systemReady()
activate ActivityManagerService
ActivityManagerService --> Runnable: run()
activate Runnable
Runnable --> Runnable: startSystemUi()
note right: 一.启动APP:\n第一个应用程序SystemUI
activate Runnable
deactivate Runnable
deactivate Runnable
ActivityManagerService --> ActivityManagerService: startPersistentApps()
activate ActivityManagerService
note right: 二.启动APP:\n1.persistent \n2.PackageManager.MATCH_DIRECT_BOOT_AWARE
deactivate ActivityManagerService
ActivityManagerService --> ActivityManagerService: startHomeActivityLocked()
activate ActivityManagerService
ActivityManagerService --> ActivityManagerService: resolveActivityInfo()
activate ActivityManagerService
ActivityManagerService --> PackageManagerService: resolveIntent()
activate PackageManagerService
PackageManagerService --> PackageManagerService: resolveIntentInternal()
activate PackageManagerService
PackageManagerService --> PackageManagerService: updateFlagsForResolve()
activate PackageManagerService
PackageManagerService --> PackageManagerService: updateFlagsForResolve()
activate PackageManagerService
PackageManagerService --> PackageManagerService: updateFlagsForComponent()
activate PackageManagerService
PackageManagerService --> PackageManagerService: updateFlags()
activate PackageManagerService
PackageManagerService --> UserManagerInternal: isUserUnlockingOrUnlocked()
note right:解锁：flags |= PackageManager.MATCH_DIRECT_BOOT_AWARE | MATCH_DIRECT_BOOT_UNAWARE;\n未解锁：flags |= PackageManager.MATCH_DIRECT_BOOT_AWARE;
activate UserManagerInternal
deactivate UserManagerInternal
deactivate PackageManagerService
deactivate PackageManagerService
deactivate PackageManagerService


deactivate PackageManagerService
PackageManagerService --> PackageManagerService: queryIntentActivitiesInternal()
activate PackageManagerService
PackageManagerService --> PackageManagerService_ActivityIntentResolver: queryIntent()
activate PackageManagerService_ActivityIntentResolver
PackageManagerService_ActivityIntentResolver --> PackageManagerService_ActivityIntentResolver: queryIntent()
activate PackageManagerService_ActivityIntentResolver
PackageManagerService_ActivityIntentResolver --> PackageManagerService_ActivityIntentResolver: buildResolveList()
activate PackageManagerService_ActivityIntentResolver
PackageManagerService_ActivityIntentResolver --> PackageManagerService_ActivityIntentResolver: newResult()
activate PackageManagerService_ActivityIntentResolver
PackageManagerService_ActivityIntentResolver --> Settings: isEnabledAndMatchLPr()
activate Settings
Settings --> PackageUserState: isMatch()
activate PackageUserState
note right: 1.isSystemApp\n2.manifest配置了MATCH_DIRECT_BOOT_AWARE
deactivate SystemServer
deactivate PackageUserState
deactivate Settings
deactivate PackageManagerService_ActivityIntentResolver
deactivate PackageManagerService_ActivityIntentResolver
deactivate PackageManagerService_ActivityIntentResolver
deactivate PackageManagerService_ActivityIntentResolver
deactivate PackageManagerService
deactivate PackageManagerService
deactivate PackageManagerService

ActivityManagerService --> ActivityStartController: startHomeActivity()
activate ActivityStartController
note right: 三.启动APP:\nfallbackHome Activity
ActivityStartController --> ActivityThread: handleResumeActivity()
activate ActivityThread
ActivityThread --> Looper: addIdleHandler()
activate Looper
deactivate Looper
deactivate ActivityThread
Looper --> ActivityManagerService: activityIdle()
activate ActivityManagerService
ActivityManagerService --> ActivityStackSupervisor: activityIdleInternalLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor --> ActivityStackSupervisor: checkFinishBootingLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor --> ActivityManagerService: postFinishBooting()
activate ActivityManagerService
ActivityManagerService --> ActivityManagerService: finishBooting()
activate ActivityManagerService
deactivate ActivityManagerService
ActivityManagerService --> ActivityManagerService: enableScreenAfterBoot()
activate ActivityManagerService
ActivityManagerService --> WindowManagerService: enableScreenAfterBoot()
activate WindowManagerService
WindowManagerService --> WindowManagerService: performEnableScreen()
activate WindowManagerService
WindowManagerService --> PhoneWindowManager: systemBooted()
activate PhoneWindowManager
PhoneWindowManager --> PhoneWindowManager: bindKeyguard()
activate PhoneWindowManager
deactivate PhoneWindowManager
PhoneWindowManager --> PhoneWindowManager: startedWakingUp()
activate PhoneWindowManager
deactivate PhoneWindowManager
PhoneWindowManager --> PhoneWindowManager: screenTurningOn()
activate PhoneWindowManager
deactivate PhoneWindowManager
PhoneWindowManager --> PhoneWindowManager: screenTurnedOn()
activate PhoneWindowManager
deactivate PhoneWindowManager
deactivate PhoneWindowManager

WindowManagerService --> WindowManagerService: performEnableScreen()
activate WindowManagerService
WindowManagerService --> WindowManagerService: checkBootAnimationCompleteLocked()
activate WindowManagerService
deactivate WindowManagerService
deactivate ActivityManagerService
deactivate ActivityManagerService
deactivate ActivityManagerService
deactivate ActivityManagerService
deactivate ActivityManagerService
deactivate ActivityManagerService
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityStartController
note right:200ms轮询检查动画是否结束
WindowManagerService --> ActivityManagerService: bootAnimationComplete()
activate ActivityManagerService
deactivate WindowManagerService
deactivate WindowManagerService
deactivate WindowManagerService
ActivityManagerService --> ActivityManagerService: finishBooting()
activate ActivityManagerService
ActivityManagerService --> UserController: sendBootCompleted()
activate UserController
UserController --> UserController: finishUserBoot()
activate UserController
UserController --> UserController: maybeUnlockUser()
activate UserController
UserController --> UserController: unlockUserCleared()
activate UserController
UserController --> UserController: finishUserUnlocking()
activate UserController
deactivate UserController
UserController --> UserController: finishUserUnlocked()
activate UserController
UserController --> UserController: startPersistentApps()
note right: 四.启动APP：\n1.persistent\n2.PackageManager.MATCH_DIRECT_BOOT_UNAWARE
activate UserController
deactivate UserController
UserController --> ActivityManagerService: broadcastIntent()
note right: 发送广播ACTION_USER_UNLOCKED
activate ActivityManagerService
deactivate ActivityManagerService
UserController --> UserController: finishUserUnlockedCompleted()
activate UserController
UserController --> ActivityManagerService: broadcastIntentLocked()
activate ActivityManagerService
deactivate ActivityManagerService
note right: 发送广播ACTION_BOOT_COMPLETED
deactivate UserController
deactivate UserController
deactivate UserController
deactivate UserController
deactivate UserController
deactivate UserController
deactivate UserController
deactivate ActivityManagerService
deactivate ActivityManagerService

FallbackHome --> FallbackHome: maybeFinish()
activate FallbackHome
note right: 收到解锁广播
FallbackHome --> FallbackHome: finish()
activate FallbackHome
FallbackHome --> ActivityManagerService: activityDestroyed()
activate ActivityManagerService
ActivityManagerService --> ActivityStack: activityDestroyedLocked()
activate ActivityStack

ActivityStack --> ActivityStackSupervisor: resumeFocusedStackTopActivityLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor --> ActivityStack: resumeTopActivityUncheckedLocked()
activate ActivityStack
ActivityStack --> ActivityStack: resumeTopActivityInnerLocked()
activate ActivityStack
ActivityStack --> ActivityStack: resumeTopActivityInNextFocusableStack()
activate ActivityStack
ActivityStack --> ActivityStackSupervisor: resumeHomeStackTask()
activate ActivityStackSupervisor
note right: 五.启动APP:\n Focus stack中未找到runningActivity则启动Launcher





@enduml