@startuml

box "App" #LightYellow
participant Activity
participant Application
participant Instrumentation
participant ActivityManager
participant ActivityThread_ApplicationThread
participant ActivityThread
participant TransactionExecutor
participant ActivityClientRecord
participant LaunchActivityItem
participant ResumeActivityItem
participant PauseActivityItem
participant ActivityThread_H
participant MessageQueue
participant Looper
participant ZygoteInit
participant RuntimeInit
participant ZygoteConnection_App
participant ClientTransaction_App
participant MessageQueue_IdleHandler
participant ContextImpl
participant LoadedApk
end box

box "Binder" #Light
participant IActivityManager
participant IApplicationThread
end box

box "AMS" #LightYellow
participant ActivityManagerService
participant ActivityStarter
participant ActivityStackSupervisor
participant ActivityDisplay
participant ActivityStack
participant TaskRecord
participant ActivityRecord
participant ClientLifecycleManager
participant ProcessRecord
participant Process
participant ClientTransaction_AMS
participant ZygoteProcess
participant BufferedWriter
end box

box "Controller"  #LightYellow
participant DisplayWindowController
participant StackWindowController
participant TaskWindowContainerController
participant AppWindowContainerController
end box

box "WMS"  #LightYellow
participant WindowManagerService
participant WindowSurfacePlacer
participant AppWindowToken
participant SurfaceAnimator
participant SurfaceControl
participant DisplayContent
participant TaskStack
participant TaskStackContainers
participant RootWindowContainer
participant Task

end box

box "Socket"  #Light
participant LocalSocket
participant OutputStream
end box

box "Zygote"  #LightBlue
participant ZygoteServer
participant ZygoteConnection_Zygote
participant Zygote
end box

activate Activity
Activity -> Activity: startActivity()
activate Activity
Activity -> Activity: startActivityForResult()
activate Activity
Activity -> Instrumentation: execStartActivity()
activate Instrumentation
Instrumentation -> ActivityManager: getService()
activate ActivityManager
ActivityManager ->> IActivityManager: startActivity()
activate IActivityManager
deactivate IActivityManager
deactivate ActivityManager
deactivate Instrumentation
deactivate Activity
deactivate Activity
deactivate Activity
deactivate Activity

IActivityManager -> ActivityManagerService: startActivity()
activate ActivityManagerService
ActivityManagerService -> ActivityManagerService: startActivityAsUser()
activate ActivityManagerService
ActivityManagerService -> ActivityStarter: execute()
activate ActivityStarter
ActivityStarter -> ActivityStarter: startActivityMayWait()
activate ActivityStarter
ActivityStarter -> ActivityStarter: startActivity()
activate ActivityStarter
ActivityStarter -> ActivityStarter: startActivity()
activate ActivityStarter

ActivityStarter -> ActivityRecord:new()
activate ActivityRecord
deactivate ActivityRecord

ActivityStarter -> ActivityStarter: startActivity()
activate ActivityStarter
ActivityStarter -> ActivityStarter: startActivityUnchecked()
activate ActivityStarter
ActivityStarter -> ActivityStarter: getReusableIntentActivity()
activate ActivityStarter
deactivate ActivityStarter

ActivityStarter -> ActivityStarter: setTaskFromReuseOrCreateNewTask()
activate ActivityStarter
ActivityStarter -> ActivityStarter: computeStackFocus()
activate ActivityStarter
ActivityStarter -> ActivityStarter: getLaunchStack()
activate ActivityStarter
ActivityStarter -> ActivityStackSupervisor: getLaunchStack()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStackSupervisor: getActivityDisplayOrCreateLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityDisplay: new()
activate ActivityDisplay
ActivityDisplay -> ActivityDisplay: createWindowContainerController()
activate ActivityDisplay
ActivityDisplay -> DisplayWindowController : new()
activate DisplayWindowController
DisplayWindowController -> RootWindowContainer : createDisplayContent()
activate RootWindowContainer
RootWindowContainer -> DisplayContent : new()
activate DisplayContent
DisplayContent -> RootWindowContainer : addChild(this)
activate RootWindowContainer
deactivate RootWindowContainer
deactivate DisplayContent
deactivate RootWindowContainer
deactivate DisplayWindowController
deactivate ActivityDisplay
deactivate ActivityDisplay

ActivityStackSupervisor -> ActivityStackSupervisor: attachDisplay()
activate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityDisplay: getOrCreateStack()
activate ActivityDisplay
ActivityDisplay -> ActivityDisplay: getOrCreateStack()
activate ActivityDisplay
ActivityDisplay -> ActivityDisplay: createStack()
activate ActivityDisplay
ActivityDisplay -> ActivityDisplay: createStackUnchecked()
activate ActivityDisplay
ActivityDisplay -> ActivityStack: new()
activate ActivityStack
ActivityStack -> ActivityStack: createStackWindowController()
activate ActivityStack
ActivityStack -> StackWindowController: new()
activate StackWindowController
StackWindowController -> DisplayContent: createStack()
activate DisplayContent
DisplayContent -> TaskStack: new()
activate TaskStack
deactivate TaskStack
DisplayContent -> TaskStackContainers: addStackToDisplay(TaskStack)
deactivate TaskStack
activate TaskStackContainers
TaskStackContainers -> TaskStackContainers: addChild(TaskStack)
activate TaskStackContainers
deactivate TaskStackContainers
deactivate TaskStackContainers
deactivate ActivityStack
deactivate DisplayContent
deactivate StackWindowController
ActivityStack -> ActivityStack: postAddToDisplay()
activate ActivityStack
ActivityStack -> ActivityDisplay: addChild(this)
activate ActivityDisplay
deactivate ActivityStack
deactivate ActivityStack
deactivate ActivityDisplay
deactivate ActivityDisplay
deactivate ActivityDisplay
deactivate ActivityDisplay
deactivate ActivityDisplay
deactivate ActivityStarter
deactivate ActivityStarter
deactivate ActivityStarter
deactivate ActivityStarter
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor

ActivityStarter -> ActivityStack: createTaskRecord()
activate ActivityStack
ActivityStack -> TaskRecord: create()
activate ActivityStack
activate TaskRecord
TaskRecord -> TaskRecord: new()
activate TaskRecord
deactivate ActivityStack
deactivate TaskRecord
deactivate TaskRecord

ActivityStack -> ActivityStack: addTask()
activate ActivityStack
deactivate ActivityStack
ActivityStack -> TaskRecord: createWindowContainer()
activate TaskRecord
TaskRecord -> TaskWindowContainerController: new()
activate TaskWindowContainerController
TaskWindowContainerController -> TaskWindowContainerController: createTask()
activate TaskWindowContainerController
TaskWindowContainerController -> Task: new()
activate Task
deactivate Task
deactivate TaskWindowContainerController
TaskWindowContainerController -> TaskStack: addTask(Task)
activate TaskStack
TaskStack -> TaskStack: addChild(Task)
activate TaskStack
deactivate TaskStack
deactivate TaskStack
deactivate TaskWindowContainerController
deactivate TaskRecord
deactivate ActivityStack
deactivate ActivityStack

ActivityStarter -> ActivityStarter:addOrReparentStartingActivity()
activate ActivityStarter
ActivityStarter -> TaskRecord:addActivityToTop()
activate TaskRecord
TaskRecord -> TaskRecord:addActivityAtIndex()
activate TaskRecord
deactivate TaskRecord
deactivate TaskRecord
deactivate ActivityStarter
deactivate ActivityStarter

ActivityStarter -> ActivityStack: startActivityLocked

activate ActivityStack
ActivityStack -> ActivityStack: insertTaskAtTop()
activate ActivityStack
deactivate ActivityStack
ActivityStack -> ActivityRecord: createWindowContainer()

activate ActivityRecord
ActivityRecord -> AppWindowContainerController: new()

activate AppWindowContainerController
AppWindowContainerController -> AppWindowContainerController: createAppWindow()
activate AppWindowContainerController
AppWindowContainerController -> AppWindowToken: new()
activate AppWindowToken
deactivate AppWindowToken
AppWindowContainerController -> DisplayContent:addWindowToken()
activate DisplayContent
deactivate DisplayContent
deactivate AppWindowContainerController
AppWindowContainerController -> Task: addChild(atoken, index)
activate Task
deactivate Task
deactivate AppWindowContainerController

ActivityRecord -> TaskRecord: addActivityToTop()
activate TaskRecord
deactivate TaskRecord
deactivate Task
deactivate AppWindowContainerController
deactivate AppWindowContainerController
deactivate ActivityRecord

ActivityStack -> ActivityRecord: showStartingWindow()
activate ActivityRecord

ActivityRecord -> ActivityRecord: showStartingWindow()
activate ActivityRecord

ActivityRecord -> AppWindowContainerController: addStartingWindow()

activate AppWindowContainerController
AppWindowContainerController -> AppWindowContainerController: scheduleAddStartingWindow()
activate AppWindowContainerController
deactivate AppWindowContainerController
deactivate AppWindowContainerController
deactivate ActivityRecord
deactivate ActivityRecord
deactivate ActivityStack


ActivityStarter -> ActivityStackSupervisor: resumeFocusedStackTopActivityLocked()

activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStack: resumeTopActivityUncheckedLocked()

activate ActivityStack
ActivityStack -> ActivityStack: resumeTopActivityInnerLocked()
activate ActivityStack
ActivityStack -> ActivityStackSupervisor: pauseBackStacks()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStack: startPausingLocked()

activate ActivityStack
ActivityStack -> ActivityStack: startPausingLocked()
activate ActivityStack
ActivityStack -> ClientLifecycleManager: scheduleTransaction(PauseActivityItem)
activate ClientLifecycleManager
ClientLifecycleManager -> ClientTransaction_AMS:schedule()
activate ClientTransaction_AMS

ClientTransaction_AMS ->> IApplicationThread:scheduleTransaction()
activate IApplicationThread
deactivate IApplicationThread
deactivate ClientTransaction_AMS
deactivate ClientLifecycleManager
deactivate ActivityStack
deactivate ActivityStack
deactivate ActivityStack
deactivate ActivityStack
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate IActivityManager
deactivate ActivityManagerService
deactivate ActivityManagerService
deactivate ActivityStarter
deactivate ActivityStarter
deactivate ActivityStarter
deactivate ActivityStarter

IApplicationThread -> ActivityThread_ApplicationThread:scheduleTransaction()
activate ActivityThread_ApplicationThread

ActivityThread_ApplicationThread -> ActivityThread:scheduleTransaction()
deactivate ActivityThread_ApplicationThread
deactivate IApplicationThread
activate ActivityThread

ActivityThread -> ActivityThread:sendMessage()
activate ActivityThread
ActivityThread -> TransactionExecutor:execute()
activate TransactionExecutor
TransactionExecutor -> TransactionExecutor:executeLifecycleState()
activate TransactionExecutor
TransactionExecutor -> PauseActivityItem:execute()

activate PauseActivityItem
PauseActivityItem -> ActivityThread:handlePauseActivity()
activate ActivityThread
ActivityThread -> ActivityThread:performPauseActivity()
activate ActivityThread
ActivityThread -> ActivityThread:performPauseActivityIfNeeded()
ActivityThread -> Instrumentation:callActivityOnPause()
activate Instrumentation
Instrumentation -> Activity:performPause
activate Activity
Activity -> Activity:onPause()
activate Activity
deactivate Activity
deactivate Activity
deactivate Instrumentation
deactivate ActivityThread
deactivate ActivityThread
deactivate ActivityThread
deactivate ActivityThread
deactivate PauseActivityItem

TransactionExecutor -> PauseActivityItem:postExecute()
activate PauseActivityItem
PauseActivityItem -> ActivityManager:getService()
activate ActivityManager
ActivityManager ->> IActivityManager:activityPaused()
activate IActivityManager
deactivate IActivityManager
deactivate TransactionExecutor
deactivate TransactionExecutor
deactivate PauseActivityItem
deactivate ActivityManager

IActivityManager -> ActivityManagerService:activityPaused()
activate ActivityManagerService
ActivityManagerService -> ActivityStack:activityPausedLocked()
activate ActivityStack
ActivityStack -> ActivityStack:completePauseLocked()
activate ActivityStack
ActivityStack -> ActivityStackSupervisor:resumeFocusedStackTopActivityLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStack:resumeTopActivityUncheckedLocked()
activate ActivityStack
ActivityStack -> ActivityStack:resumeTopActivityInnerLocked()
activate ActivityStack
ActivityStack -> ActivityStackSupervisor:startSpecificActivityLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityManagerService:startProcessLocked()
activate ActivityManagerService
ActivityManagerService -> ActivityManagerService:newProcessRecordLocked()
activate ActivityManagerService
ActivityManagerService -> ProcessRecord:new()
activate ProcessRecord
deactivate ProcessRecord
deactivate ActivityManagerService
deactivate ActivityManagerService

ActivityManagerService -> ActivityManagerService:startProcessLocked()
activate ActivityManagerService
ActivityManagerService -> ActivityManagerService:startProcess()
activate ActivityManagerService
ActivityManagerService -> Process:start()
activate Process
Process -> ZygoteProcess:start()
activate ZygoteProcess
ZygoteProcess -> ZygoteProcess:startViaZygote()
activate ZygoteProcess
ZygoteProcess -> ZygoteProcess:zygoteSendArgsAndGetResult()
activate ZygoteProcess
ZygoteProcess -> BufferedWriter:write()
activate BufferedWriter
BufferedWriter -> LocalSocket:getOutputStream()
activate LocalSocket
LocalSocket -> OutputStream:write()
activate OutputStream
deactivate OutputStream
deactivate LocalSocket
deactivate BufferedWriter
deactivate ZygoteProcess
deactivate ZygoteProcess
deactivate ZygoteProcess
deactivate Process
deactivate ActivityStack
deactivate ActivityStack

deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityManagerService
deactivate ActivityManagerService
deactivate ActivityManagerService



ActivityStack -> ActivityStackSupervisor:ensureActivitiesVisibleLocked()
activate ActivityStackSupervisor
note left: process进程存在
ActivityStackSupervisor -> ActivityStack:ensureActivitiesVisibleLocked()
activate ActivityStack
ActivityStack -> ActivityStack:makeInvisible()
activate ActivityStack
ActivityStack -> ActivityStack:addToStopping()
activate ActivityStack
ActivityStack -> ActivityStackSupervisor:scheduleIdleLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStackSupervisor:activityIdleInternalLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStack:stopActivityLocked()
activate ActivityStack
ActivityStack -> ClientLifecycleManager:scheduleTransaction(StopActivityItem)
activate ClientLifecycleManager
deactivate ClientLifecycleManager
deactivate ActivityStack
deactivate ActivityStack
deactivate ActivityStack
deactivate ActivityStack
deactivate ActivityStack
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor


ActivityStack -> WindowManagerService:continueSurfaceLayout()
activate WindowManagerService
WindowManagerService -> WindowSurfacePlacer:continueLayout()
activate WindowSurfacePlacer
WindowSurfacePlacer -> WindowSurfacePlacer:performSurfacePlacement()
activate WindowSurfacePlacer
WindowSurfacePlacer -> WindowSurfacePlacer:performSurfacePlacementLoop()
activate WindowSurfacePlacer
WindowSurfacePlacer -> RootWindowContainer:performSurfacePlacement()
activate RootWindowContainer
RootWindowContainer -> WindowSurfacePlacer:handleAppTransitionReadyLocked()
activate WindowSurfacePlacer
WindowSurfacePlacer -> WindowSurfacePlacer:handleClosingApps()
activate WindowSurfacePlacer
WindowSurfacePlacer -> AppWindowToken:setVisibility()
activate AppWindowToken
AppWindowToken -> AppWindowToken:applyAnimationLocked()
activate AppWindowToken
AppWindowToken -> SurfaceAnimator:startAnimation()
activate SurfaceAnimator
SurfaceAnimator -> AppWindowToken:onAnimationLeashCreated()
activate AppWindowToken
AppWindowToken -> AppWindowToken:getPrefixOrderIndex()
activate AppWindowToken
AppWindowToken -> SurfaceControl:setLayer()
activate SurfaceControl
AppWindowToken -> DisplayContent:assignStackOrdering()
activate DisplayContent
DisplayContent -> TaskStackContainers:assignStackOrdering()
activate TaskStackContainers
deactivate TaskStackContainers
deactivate DisplayContent
deactivate SurfaceControl
deactivate SurfaceAnimator
deactivate AppWindowToken
deactivate AppWindowToken
deactivate AppWindowToken
deactivate AppWindowToken
deactivate WindowSurfacePlacer




WindowSurfacePlacer -> WindowSurfacePlacer:handleOpeningApps()
activate WindowSurfacePlacer
WindowSurfacePlacer -> AppWindowToken:setVisibility()
activate AppWindowToken
AppWindowToken -> AppWindowToken:applyAnimationLocked()
activate AppWindowToken
AppWindowToken -> SurfaceAnimator:startAnimation()
activate SurfaceAnimator
SurfaceAnimator -> AppWindowToken:onAnimationLeashCreated()
activate AppWindowToken
AppWindowToken -> AppWindowToken:getPrefixOrderIndex()
activate AppWindowToken
AppWindowToken -> SurfaceControl:setLayer()
activate SurfaceControl
AppWindowToken -> DisplayContent:assignStackOrdering()
activate DisplayContent
DisplayContent -> TaskStackContainers:assignStackOrdering()
activate TaskStackContainers
deactivate TaskStackContainers
deactivate DisplayContent
deactivate SurfaceControl
deactivate SurfaceAnimator
deactivate AppWindowToken
deactivate AppWindowToken
deactivate AppWindowToken
deactivate AppWindowToken
deactivate WindowSurfacePlacer
deactivate WindowSurfacePlacer
deactivate WindowSurfacePlacer
deactivate WindowSurfacePlacer
deactivate WindowSurfacePlacer
deactivate RootWindowContainer
deactivate WindowManagerService
deactivate ActivityStack


OutputStream -> ZygoteServer:runSelectLoop()
activate ZygoteServer
ZygoteServer -> ZygoteConnection_Zygote:processOneCommand()
activate ZygoteConnection_Zygote
ZygoteConnection_Zygote -> Zygote:forkAndSpecialize()
activate Zygote
Zygote -> Zygote:nativeForkAndSpecialize()
activate Zygote
deactivate Zygote
deactivate Zygote
deactivate ZygoteConnection_Zygote
deactivate ZygoteServer

ZygoteConnection_Zygote -> ZygoteConnection_App:handleChildProc()
activate ZygoteConnection_App
ZygoteConnection_App -> ZygoteInit:zygoteInit()
activate ZygoteInit
ZygoteInit -> RuntimeInit:commonInit()
activate RuntimeInit
deactivate RuntimeInit
ZygoteInit -> ZygoteInit:nativeZygoteInit()
activate ZygoteInit
deactivate ZygoteInit
ZygoteInit -> RuntimeInit:applicationInit()
activate RuntimeInit
RuntimeInit -> RuntimeInit:findStaticMain()
activate RuntimeInit
RuntimeInit -> ActivityThread:main()
activate ActivityThread
ActivityThread -> Looper:prepareMainLooper()
activate Looper
deactivate Looper
ActivityThread -> ActivityThread:new()
activate ActivityThread
deactivate ActivityThread
ActivityThread -> ActivityThread:attach()
activate ActivityThread
ActivityThread -> ActivityManager:getService()
activate ActivityManager
ActivityManager ->> IActivityManager:attachApplication()
activate IActivityManager
deactivate IActivityManager
deactivate ActivityManager
deactivate ActivityThread

ActivityThread -> Looper:loop()
activate Looper
deactivate Looper
deactivate ActivityThread
deactivate ZygoteInit
deactivate RuntimeInit
deactivate RuntimeInit
deactivate ZygoteConnection_App

IActivityManager -> ActivityManagerService:attachApplication()
activate ActivityManagerService
ActivityManagerService -> ActivityManagerService:attachApplicationLocked()
activate ActivityManagerService
ActivityManagerService ->> IApplicationThread:bindApplication
activate IApplicationThread
deactivate IApplicationThread
IApplicationThread -> ActivityThread:bindApplication
activate ActivityThread
ActivityThread -> ActivityThread:sendMessage(H.BIND_APPLICATION)
activate ActivityThread
ActivityThread -> ActivityThread:handleBindApplication()
activate ActivityThread
ActivityThread -> Instrumentation:onCreate()
activate Instrumentation
deactivate Instrumentation
ActivityThread -> Instrumentation:callApplicationOnCreate
activate Instrumentation
Instrumentation -> Application:onCreate()
activate Application
deactivate Application
deactivate Instrumentation
deactivate ActivityThread
deactivate ActivityThread
deactivate ActivityThread

ActivityManagerService -> ActivityStackSupervisor:attachApplicationLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStackSupervisor:realStartActivityLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStackSupervisor:ensureActivitiesVisibleLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStack:ensureActivitiesVisibleLocked()
activate ActivityStack
ActivityStack -> ActivityStack:makeVisibleAndRestartIfNeeded()
activate ActivityStack
ActivityStack -> ActivityStackSupervisor:startSpecificActivityLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ActivityStackSupervisor:realStartActivityLocked()
activate ActivityStackSupervisor
ActivityStackSupervisor -> ClientLifecycleManager:scheduleTransaction()
activate ClientLifecycleManager
ClientLifecycleManager -> ClientTransaction_AMS:schedule()
activate ClientTransaction_AMS
ClientTransaction_AMS ->> IApplicationThread:scheduleTransaction()
activate IApplicationThread
deactivate IApplicationThread
deactivate ClientTransaction_AMS
deactivate ClientLifecycleManager
deactivate ActivityStack
deactivate ActivityStack
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityStackSupervisor
deactivate ActivityManagerService
deactivate ActivityManagerService

IApplicationThread -> ActivityThread:scheduleTransaction()
activate ActivityThread
ActivityThread -> ActivityThread:sendMessage(ActivityThread.H.EXECUTE_TRANSACTION)
activate ActivityThread
ActivityThread -> ActivityThread_H:sendMessage()
activate ActivityThread_H
ActivityThread_H -> ActivityThread_H:sendMessageDelayed()
activate ActivityThread_H
ActivityThread_H -> ActivityThread_H:sendMessageAtTime()
activate ActivityThread_H
ActivityThread_H -> ActivityThread_H:enqueueMessage()
activate ActivityThread_H
ActivityThread_H -> MessageQueue:enqueueMessage()
activate MessageQueue
deactivate MessageQueue
deactivate ActivityThread_H
deactivate ActivityThread_H
deactivate ActivityThread_H
deactivate ActivityThread_H
deactivate ActivityThread
deactivate ActivityThread

Looper -> Looper:loop()
activate Looper
Looper -> ActivityThread_H:dispatchMessage()
activate ActivityThread_H
ActivityThread_H -> ActivityThread_H:handleMessage()
activate ActivityThread_H
ActivityThread_H -> TransactionExecutor:execute()
activate TransactionExecutor
TransactionExecutor -> TransactionExecutor:executeCallbacks()
activate TransactionExecutor
TransactionExecutor -> LaunchActivityItem:execute()
activate LaunchActivityItem
LaunchActivityItem -> ActivityClientRecord:new()
activate ActivityClientRecord
deactivate ActivityClientRecord
LaunchActivityItem -> ActivityThread:handleLaunchActivity()
activate ActivityThread
ActivityThread -> ActivityThread:performLaunchActivity()
activate ActivityThread
ActivityThread -> ActivityThread:createBaseContextForActivity()
activate ActivityThread
ActivityThread -> ContextImpl:createActivityContext()
activate ContextImpl
deactivate ContextImpl
deactivate ActivityThread
ActivityThread -> LoadedApk:makeApplication()
activate LoadedApk
deactivate LoadedApk
ActivityThread -> Activity:attach()
activate Activity
deactivate Activity

ActivityThread -> Instrumentation:callActivityOnCreate()
activate Instrumentation
Instrumentation -> Activity:performCreate()
activate Activity
Activity -> Activity:onCreate()
activate Activity
deactivate Activity
deactivate Activity
deactivate Instrumentation
deactivate ActivityThread
deactivate ActivityThread
deactivate ActivityThread
deactivate ActivityThread
deactivate TransactionExecutor
deactivate LaunchActivityItem

TransactionExecutor -> TransactionExecutor:executeLifecycleState()
activate TransactionExecutor
TransactionExecutor -> TransactionExecutor:cycleToPath()
activate TransactionExecutor
TransactionExecutor -> TransactionExecutor:performLifecycleSequence()
activate TransactionExecutor
TransactionExecutor -> ActivityThread:handleStartActivity()
activate ActivityThread
ActivityThread -> Activity:performStart()
activate Activity
Activity -> Instrumentation:callActivityOnStart()
activate Instrumentation
Instrumentation -> Activity:onStart()
activate Activity
deactivate Activity
deactivate Activity
deactivate Instrumentation
deactivate ActivityThread
deactivate TransactionExecutor
deactivate TransactionExecutor

TransactionExecutor -> ResumeActivityItem:execute()
activate ResumeActivityItem
ResumeActivityItem -> ActivityThread:handleResumeActivity()
activate ActivityThread
ResumeActivityItem -> ActivityThread:performResumeActivity()
activate ActivityThread
ActivityThread -> Activity:performResume()
activate Activity
Activity -> Instrumentation:callActivityOnResume()
activate Instrumentation
Instrumentation -> Activity:onResume()
activate Activity
deactivate Activity
deactivate Activity
deactivate Instrumentation
deactivate ActivityThread
deactivate ActivityThread
deactivate ResumeActivityItem

TransactionExecutor -> ResumeActivityItem:postExecute()
activate ResumeActivityItem
ResumeActivityItem -> ActivityManager:getService()
activate ActivityManager
ActivityManager ->> IActivityManager:activityResumed()
activate IActivityManager
deactivate IActivityManager
deactivate ResumeActivityItem
deactivate TransactionExecutor
deactivate TransactionExecutor
deactivate ActivityManager
deactivate ActivityThread_H
deactivate ActivityThread_H


IActivityManager -> ActivityManagerService:activityResumed()
activate ActivityManagerService
deactivate ActivityManagerService
Looper -> MessageQueue_IdleHandler:queueIdle()
activate MessageQueue_IdleHandler
MessageQueue_IdleHandler -> IActivityManager:activityIdle()
activate IActivityManager
deactivate IActivityManager

IActivityManager -> ActivityManagerService:activityIdle()
activate ActivityManagerService

ActivityManagerService -> ActivityStackSupervisor: activityIdleInternalLocked()
activate ActivityStackSupervisor

ActivityStackSupervisor -> ActivityStack: stopActivityLocked()
activate ActivityStack

ActivityStack -> ClientLifecycleManager:scheduleTransaction(StopActivityItem)
activate ClientLifecycleManager



@enduml